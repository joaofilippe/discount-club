// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/joaofilippe/discount-club/app/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Discount is an autogenerated mock type for the Discount type
type Discount struct {
	mock.Mock
}

// GetByCode provides a mock function with given fields: code
func (_m *Discount) GetByCode(code string) (*entities.Discount, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *entities.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Discount, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Discount); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Discount) GetByID(id uuid.UUID) (*entities.Discount, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Discount
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entities.Discount, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.Discount); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Discount)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: discount
func (_m *Discount) Save(discount *entities.Discount) error {
	ret := _m.Called(discount)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Discount) error); ok {
		r0 = rf(discount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDiscount creates a new instance of Discount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscount(t interface {
	mock.TestingT
	Cleanup(func())
}) *Discount {
	mock := &Discount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
